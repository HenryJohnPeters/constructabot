generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  orgId         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  org       Org       @relation(fields: [orgId], references: [id])
  jobs      Job[]
  usages    Usage[]
  auditLogs AuditLog[]

  @@index([orgId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Org {
  id             String   @id @default(cuid())
  name           String
  slug           String   @unique
  logo           String?
  primaryColor   String   @default("#0ea5e9")
  secondaryColor String   @default("#f1f5f9")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  users        User[]
  agents       Agent[]
  jobs         Job[]
  subscription Subscription?
  usageBuckets UsageBucket[]
  apiKeys      ApiKey[]
  auditLogs    AuditLog[]

  @@index([slug])
}

model Agent {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String   @default("RESEARCH")
  config      String   // JSON as string
  isActive    Boolean  @default(true)
  orgId       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  org  Org   @relation(fields: [orgId], references: [id])
  jobs Job[]

  @@index([orgId])
}

model Job {
  id        String   @id @default(cuid())
  prompt    String
  output    String?
  status    String   @default("PENDING")
  credits   Int      @default(1)
  userId    String
  orgId     String
  agentId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  org   Org   @relation(fields: [orgId], references: [id])
  agent Agent @relation(fields: [agentId], references: [id])

  @@index([orgId])
  @@index([userId])
  @@index([status])
}

model Subscription {
  id               String   @id @default(cuid())
  stripeId         String   @unique
  plan             String   @default("BASIC")
  status           String
  currentPeriodEnd DateTime
  credits          Int      @default(100)
  orgId            String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  org Org @relation(fields: [orgId], references: [id])

  @@index([stripeId])
}

model Usage {
  id        String   @id @default(cuid())
  credits   Int
  action    String
  userId    String
  orgId     String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([orgId])
  @@index([userId])
  @@index([createdAt])
}

model UsageBucket {
  id           String   @id @default(cuid())
  month        String
  totalCredits Int      @default(0)
  orgId        String
  createdAt    DateTime @default(now())

  org Org @relation(fields: [orgId], references: [id])

  @@unique([orgId, month])
  @@index([orgId])
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  resource  String
  userId    String?
  orgId     String
  metadata  String?  // JSON as string
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])
  org  Org   @relation(fields: [orgId], references: [id])

  @@index([orgId])
  @@index([createdAt])
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @unique
  name      String
  isActive  Boolean  @default(true)
  orgId     String
  createdAt DateTime @default(now())

  org Org @relation(fields: [orgId], references: [id])

  @@index([orgId])
  @@index([key])
}